{"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nconst CHAIN_ID = 1;\r\nexport class WalletLinkConnector extends AbstractConnector {\r\n    constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }) {\r\n        super({ supportedChainIds: supportedChainIds });\r\n        this.url = url;\r\n        this.appName = appName;\r\n        this.appLogoUrl = appLogoUrl;\r\n        this.darkMode = darkMode || false;\r\n        this.handleChainChanged = this.handleChainChanged.bind(this);\r\n        this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\r\n    }\r\n    async activate() {\r\n        // @ts-ignore\r\n        if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\r\n            // user is in the dapp browser on Coinbase Wallet\r\n            this.provider = window.ethereum;\r\n        }\r\n        else if (!this.walletLink) {\r\n            const WalletLink = await import('walletlink').then(m => m?.default ?? m);\r\n            this.walletLink = new WalletLink({\r\n                appName: this.appName,\r\n                darkMode: this.darkMode,\r\n                ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\r\n            });\r\n            this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID);\r\n        }\r\n        const accounts = await this.provider.request({\r\n            method: 'eth_requestAccounts'\r\n        });\r\n        const account = accounts[0];\r\n        this.provider.on('chainChanged', this.handleChainChanged);\r\n        this.provider.on('accountsChanged', this.handleAccountsChanged);\r\n        return { provider: this.provider, account: account };\r\n    }\r\n    async getProvider() {\r\n        return this.provider;\r\n    }\r\n    async getChainId() {\r\n        return this.provider.chainId;\r\n    }\r\n    async getAccount() {\r\n        const accounts = await this.provider.request({\r\n            method: 'eth_requestAccounts'\r\n        });\r\n        return accounts[0];\r\n    }\r\n    deactivate() {\r\n        this.provider.removeListener('chainChanged', this.handleChainChanged);\r\n        this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\r\n    }\r\n    async close() {\r\n        this.provider.close();\r\n        this.emitDeactivate();\r\n    }\r\n    handleChainChanged(chainId) {\r\n        if (__DEV__) {\r\n            console.log(\"Handling 'chainChanged' event with payload\", chainId);\r\n        }\r\n        this.emitUpdate({ chainId: chainId });\r\n    }\r\n    handleAccountsChanged(accounts) {\r\n        if (__DEV__) {\r\n            console.log(\"Handling 'accountsChanged' event with payload\", accounts);\r\n        }\r\n        this.emitUpdate({ account: accounts[0] });\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":["E:/InProgress/walletconnect-connector/node_modules/@web3-react/types/dist/index.d.ts","E:/InProgress/walletconnect-connector/node_modules/@web3-react/abstract-connector/dist/index.d.ts","E:/InProgress/walletconnect-connector/node_modules/@walletconnect/types/index.d.ts","E:/InProgress/walletconnect-connector/node_modules/walletlink/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"E:/InProgress/walletconnect-connector/index.d.ts","writeByteOrderMark":false,"text":"import { ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { IWalletConnectProviderOptions } from '@walletconnect/types';\r\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\r\n    supportedChainIds?: number[];\r\n}\r\ninterface WalletLinkConnectorArguments {\r\n    url: string;\r\n    appName: string;\r\n    appLogoUrl?: string;\r\n    darkMode?: boolean;\r\n    supportedChainIds?: number[];\r\n}\r\nexport declare class WalletLinkConnector extends AbstractConnector {\r\n    private readonly url;\r\n    private readonly appName;\r\n    private readonly appLogoUrl?;\r\n    private readonly darkMode;\r\n    walletLink: any;\r\n    private provider;\r\n    constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments);\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<any>;\r\n    getChainId(): Promise<number>;\r\n    getAccount(): Promise<null | string>;\r\n    deactivate(): void;\r\n    close(): Promise<void>;\r\n    private handleChainChanged;\r\n    private handleAccountsChanged;\r\n}\r\nexport declare class WalletConnectConnector extends AbstractConnector {\r\n    private readonly config;\r\n    walletConnectProvider?: any;\r\n    constructor(config: WalletConnectConnectorArguments);\r\n    private handleChainChanged;\r\n    private handleAccountsChanged;\r\n    private handleDisconnect;\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<any>;\r\n    getChainId(): Promise<number | string>;\r\n    getAccount(): Promise<null | string>;\r\n    deactivate(): void;\r\n    close(): Promise<void>;\r\n}\r\nexport {};\r\n"}}
