{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\r\n\r\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\r\n\r\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\r\n  supportedChainIds?: number[]\r\n}\r\n\r\nexport class UserRejectedRequestError extends Error {\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    this.message = 'The user rejected the request.'\r\n  }\r\n}\r\n\r\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\r\n  if (supportedChainIds) {\r\n    return supportedChainIds\r\n  }\r\n\r\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\r\n}\r\n\r\nexport class WalletConnectConnector extends AbstractConnector {\r\n  private readonly config: WalletConnectConnectorArguments\r\n\r\n  public walletConnectProvider?: any\r\n\r\n  constructor(config: WalletConnectConnectorArguments) {\r\n    super({ supportedChainIds: getSupportedChains(config) })\r\n\r\n    this.config = config\r\n\r\n    this.handleChainChanged = this.handleChainChanged.bind(this)\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\r\n    this.handleDisconnect = this.handleDisconnect.bind(this)\r\n  }\r\n\r\n  private handleChainChanged(chainId: number | string): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n    }\r\n    this.emitUpdate({ chainId })\r\n  }\r\n\r\n  private handleAccountsChanged(accounts: string[]): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n    }\r\n    this.emitUpdate({ account: accounts[0] })\r\n  }\r\n\r\n  private handleDisconnect(): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'disconnect' event\")\r\n    }\r\n    this.emitDeactivate()\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.walletConnectProvider) {\r\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\r\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\r\n    }\r\n\r\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\r\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\r\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\r\n\r\n    const account = await this.walletConnectProvider\r\n      .enable()\r\n      .then((accounts: string[]): string => accounts[0])\r\n      .catch((error: Error): void => {\r\n        // TODO ideally this would be a better check\r\n        if (error.message === 'User closed modal') {\r\n          throw new UserRejectedRequestError()\r\n        }\r\n\r\n        throw error\r\n      })\r\n\r\n    return { provider: this.walletConnectProvider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.walletConnectProvider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return Promise.resolve(this.walletConnectProvider.chainId)\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {\r\n    if (this.walletConnectProvider) {\r\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\r\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\r\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\r\n      this.walletConnectProvider.disconnect()\r\n    }\r\n  }\r\n\r\n  public async close() {\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","config","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","emitDeactivate","activate","walletConnectProvider","on","_this4","enable","then","error","provider","this","m","WalletConnectProvider","getProvider","getChainId","Promise","resolve","getAccount","deactivate","removeListener","disconnect","close","AbstractConnector"],"mappings":"i5CAUaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAgBjCC,yBAKCC,WAbgBC,EAAmBC,uBAcvC,CAAED,qBAAsCD,EAdpBC,IAAAA,kBAAmBC,IAAAA,IAC3CD,IAIGC,EAAMC,OAAOC,KAAKF,GAAKG,KAAI,SAAAC,UAAKC,OAAOD,WAAME,aAW7CR,OAASA,IAETS,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,gBAIDK,oBAGMC,kDAMNC,sBAAsBC,GAAG,eAAgBC,EAAKb,sBAC9CW,sBAAsBC,GAAG,kBAAmBC,EAAKV,yBACjDQ,sBAAsBC,GAAG,aAAcC,EAAKT,kCAE3BS,EAAKF,sBACxBG,SACAC,MAAK,SAACR,UAA+BA,EAAS,aACxC,SAACS,MAEgB,sBAAlBA,EAAM5B,cACF,IAAIJ,QAGNgC,qBATJR,SAYC,CAAES,SAAUJ,EAAKF,sBAAuBH,QAAAA,SArB1CU,sBAAAL,EAAKF,6CAC4B,8QAAO,yCAAoCI,MAAK,SAAAI,+BAAKA,SAAAA,aAAcA,qBAAjGC,KACDT,sBAAwB,IAAIS,EAAsBP,EAAKtB,oGAsBnD8B,kDACJH,KAAKP,6DAGDW,iCACJC,QAAQC,QAAQN,KAAKP,sBAAsBN,+CAGvCoB,iCACJF,QAAQC,QAAQN,KAAKP,sBAAsBJ,UAAUQ,MAAK,SAACR,UAA+BA,EAAS,4CAGrGmB,WAAA,WACDR,KAAKP,6BACFA,sBAAsBgB,eAAe,aAAcT,KAAKd,uBACxDO,sBAAsBgB,eAAe,eAAgBT,KAAKlB,yBAC1DW,sBAAsBgB,eAAe,kBAAmBT,KAAKf,4BAC7DQ,sBAAsBiB,iBAIlBC,4BACXX,KAAKT,0EAnFmCqB,2CAtBf"}